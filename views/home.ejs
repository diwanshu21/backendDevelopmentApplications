<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <title>To-Do App</title>
  </head>
  <style>
    i.fa{
      display: none;
      margin-right: 10px;
    }

    .fetch i.fa{
      display: inline-block;
    }
  </style>
  <link rel="stylesheet" href="/css/style.css">
  <body>
    <header>
      <div class="container">
        <h1>TODO App</h1>
      </div>
    </header>
    <section id="main">
      <div class="container">
        <div class="create">
            <form>
            <label for="taskName">Task Name:</label>
            <input type="text" name="taskName" id="taskName" class="task" required>
            <button type="submit" class="add"><i class="fa fa-spinner fa-spin" ></i> Add</button>
            </form>
          
        </div>
        <div class="tasks">
          <h3>Tasks</h3>
          <p class="fetch"><i class="fa fa-spinner fa-spin" ></i> Loading Tasks.... </p>
            <ul>
              <!-- <% if(tasks){ %>
                <% for(let i=0;i<tasks.length;i++){ %>
                
                  <li>
                    <input type="text" class="task" value="<%= tasks[i].taskName %>" data-id="<%= tasks[i]._id %>" readonly>
                    </input> 
                    <p class="message"></p>
                    <p>
                    <button data-id="<%= tasks[i]._id %>" class="update"><i class="fa fa-spinner fa-spin" ></i> Update</button> 
                    <button data-id="<%= tasks[i]._id %>" class="delete"><i class="fa fa-spinner fa-spin" ></i> Delete</button> 
                    <button data-id="<%= tasks[i]._id %>" class="save"><i class="fa fa-spinner fa-spin" ></i> Save</button> 
                </p></li>
                
                <% } %> -->
        

              <!-- <% } %> -->
            </ul>
        </div>
      </div>
    </section>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.5.0/axios.min.js" integrity="sha512-aoTNnqZcT8B4AmeCFmiSnDlc4Nj/KPaZyB5G7JnOnUEkdNpCZs1LCankiYi01sLTyWy+m2P+W4XM+BuQ3Q4/Dg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        let form=document.querySelector('form');
        let updates=document.querySelectorAll('.update')
        let deletes=document.querySelectorAll('.delete')
        let saveButton=document.querySelectorAll('.save');
        let addloader=document.querySelector('.add i.fa');
        let updateloader=document.querySelector('.update i.fa');
        let deleteloader=document.querySelector('.delete i.fa');
        let saveloader=document.querySelector('.save i.fa');
        let fetchloader=document.querySelector('.fetch')

        fetchloader.style.display='inline-block';
fetchTasks();
        // fetch tasks
       async function fetchTasks()
        {let taskslist=document.querySelector('.tasks ul');
              
              console.log(taskslist)
              while(taskslist.firstChild){
             
                taskslist.removeChild(taskslist.firstChild);
              }
              startLoader(fetchloader);
              
          try {
            console.log('started fetching...')
            
            const response=await axios.get('/api/tasks');
            setTimeout(() => {
              

            response.data.tasks.forEach((task)=>{
              let li=document.createElement('li');
              li.classList.add('taskli')
              li.innerHTML=`<input type="text" class="task" value="${task.taskName}" data-id="${task._id}" readonly>
                    </input> 
                    <p class="message"></p>
                    <p>
                    <button data-id="${task._id}" class="update"><i class="fa fa-spinner fa-spin" ></i> Update</button> 
                    <button data-id="${task._id}" class="delete"><i class="fa fa-spinner fa-spin" ></i> Delete</button> 
                    <button data-id="${task._id}" class="save"><i class="fa fa-spinner fa-spin" ></i> Save</button> 
                </p>`;
                taskslist.appendChild(li);
            })

            let updates=document.querySelectorAll('.update')
        let deletes=document.querySelectorAll('.delete')
        let saveButton=document.querySelectorAll('.save');
        let addloader=document.querySelector('.add i.fa');
        let updateloader=document.querySelector('.update i.fa');
        let deleteloader=document.querySelector('.delete i.fa');
        let saveloader=document.querySelector('.save i.fa');
      

        deletes.forEach((deleteTask)=>{
          deleteTask.addEventListener('click',async(e)=>{
            e.preventDefault();

            startLoader(e.target.querySelector('i'));
            try {
              const data = {
           id: e.target.getAttribute('data-id')
          };
          
          fetch('/api/delete',{
            method:'DELETE',
            headers:{
              'Content-Type':'application/json'
            },
            body:JSON.stringify(data)
          }).then(response => {
            if (!response.ok) {
              endLoader(e.target.querySelector('i'));
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(responseData => {
            console.log('Response:', responseData);
            setTimeout(() => {
              endLoader(e.target.querySelector('i'));
              fetchTasks();
            }, 1000);
            
            // Handle the response data as needed
          })
          .catch(error => {
            console.error('Error:', error);
            endLoader(e.target.querySelector('i'));
            // Handle errors appropriately
          });
        } catch (error) {
          console.log(error);
          endLoader(e.target.querySelector('i'));
              }
          })
        })
       
        saveButton.forEach((savebtn)=>{
          savebtn.style.display='none'
          savebtn.addEventListener('click',saveTask)
        })
        updates.forEach((update)=>{
          update.addEventListener('click',async(e)=>{
            // remove update,delete
            // add Save
            const id=update.getAttribute('data-id');
            let deletebtn=update.nextElementSibling;
            let savebtn=deletebtn.nextElementSibling;
            update.style.display='none';
            deletebtn.style.display='none';
            savebtn.style.display='inline-block';

            // input readonly and cursor
            let task=update.parentElement.parentElement.querySelector('input');
            console.log(task)
            task.removeAttribute('readonly');

            const inputLength = task.value.length;
          task.setSelectionRange(inputLength, inputLength);
             task.focus();

          })
        })
   
       
          endLoader(fetchloader);
        }, 1000);
          
      
      } catch (error) {
            console.log(error)
          }
          
        }

        function startLoader(loader)
        {
          loader.style.display='inline-block';
        }
        function endLoader(loader)
        {
            loader.style.display='none';
        }

    
        async function saveTask(e){
        e.preventDefault();
        startLoader(e.target.querySelector('i'));
        try {
          
          let task=e.target.parentElement.parentElement.querySelector('input');
          const data = {
            id: e.target.getAttribute('data-id')
            ,
            taskName: task.value};

          fetch('/api/update',{
            method:'POST',
            headers:{
              'Content-Type':'application/json'
            },
            body:JSON.stringify(data)
          }).then(response => {
            if (!response.ok) {
              endLoader(e.target.querySelector('i'));
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(responseData => {
            console.log('Response:', responseData);
            setTimeout(() => {
              endLoader(e.target.querySelector('i'));
              fetchTasks();
            }, 1000);
            // Handle the response data as needed
          })
          .catch(error => {
            console.error('Error:', error);
            endLoader(e.target.querySelector('i'));
            // Handle errors appropriately
          });
        } catch (error) {
          console.log(error)
          endLoader(e.target.querySelector('i'));
        }
       }

        form.addEventListener('submit',async(e)=>{
            e.preventDefault();

            const formData=new FormData(form);
            console.log({formData});

            startLoader(e.target.querySelector('i'));
            
            try {
              const response=await axios.post('/api/create',formData,{
                headers: {
                  'Content-Type': 'application/json',
                },
    })
    
         console.log('Form submitted succesfully',response.data)

         setTimeout(() => {
           endLoader(e.target.querySelector('i'));
         fetchTasks();
         }, 1000);
        
         // refresh
        //  window.location.reload();
         
        } catch (error) {
          console.error('Error submitting form:', error);

          endLoader(e.target.querySelector('i'));
            }
        })

        



    </script>
  </body>
</html>
